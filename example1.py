"""
In this example the database interface is introduced, as well as the
SQLAlchemy ORM capabilities.  

This script takes an optional name of a NIRCA region as an input and 
is run using:

    python example1.py 'region'

Note: If the region name is multiple words, quotation marks must be used.

The acceptable regions in the database are:

    Pacific
    Heartland
    Great Plains
    Great Lakes
    Southeast
    Mid-Atlantic
    Northeast

We interface with the SQLite database 'test.db' using a context manager. A list
of teams is generated by querying the database using the 'regions' filter. For 
each team returned the team name and number of runners are printed to the 
screen.

If no results are found, the program raises an error and prints the 
acceptable region filter options.

"""

import argparse
import NIRCAdb as ndb
from sqlalchemy import exc

################################################################################
##
## Example 1: Print List of Teams from a Specific Region
##
################################################################################

def main(region):

    ## Use the context manager to interface with the database
    with ndb.db_session('sqlite:///test.db') as f:

        try:

            ## Query the database for teams using the region filter
            team_list = ndb.Team.from_db(f, regions=region)
            print "Region: {0}\n".format(region)

            ## Print out team attributes Team.name and Team.size()
            for team in team_list:
                print 'Team: {0}\nRunners: {1}'.format(team.name,
                                                         team.size())

            return True

        ## Query found nothing, display the acceptable regions.
        except ndb.errors.QueryError:
            print "No teams found for region '{0}'.".format(region)
            print ('Regions: Pacific, Heartland, Great Plains, Great Lakes, ' +
                   'Southeast, Mid-Atlantic, Northeast')
            return False

        ## Some other error occurred, display the traceback.
        except exc.SQLAlchemyError as e:
            print e
            return False

        
if __name__ == '__main__':

    ## Initialize argument parser
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', '--region', help='region to filter teams by.',
                        default='Pacific')

    ## Pass arguments to the main function
    args = parser.parse_args()
    region = args.region
    
    main(region)

